# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

{ lib, coreutils, nodejs, stdenv, src ? ./. }:

with lib;

let

  # Variables provided by the generator.
  project-name = @@PROJECT_NAME@@;
  yarn-path = @@YARN_PATH@@;
  cache-folder = @@CACHE_FOLDER@@;
  cache-entries = @@CACHE_ENTRIES@@;

  # Defines the shell alias to run Yarn.
  yarn-alias = ''
    yarn() {
      CI=1 node "$NIX_YARN_PATH" "$@"
    }
  '';

  # Fetch a single dependency.
  fetch = { filename, sha512, locator-hash }: stdenv.mkDerivation {
    name = replaceStrings [ "@" ] [ "-" ] filename;
    buildInputs = [ nodejs ];
    builder = builtins.toFile "builder.sh" ''
      source $stdenv/setup

      # Yarn may need a writable home directory for the global cache mirror.
      # TODO: Can't disable the mirror, because it changes cache filenames.
      export HOME="$PWD"

      # Fetch into the build directory.
      export yarn_cache_folder="$PWD"

      # Setup to environment so we can run Yarn.
      pushd '${src}' > /dev/null

      export NIX_YARN_PATH="$(readlink -f '${yarn-path}')"
      ${yarn-alias}

      # Invoke a plugin internal command to build the cache.
      yarn nixify fetch-one '${locator-hash}'

      popd > /dev/null

      # The cache file that was just fetched is our output.
      mv '${filename}' $out
    '';
    outputHashMode = "flat";
    outputHashAlgo = "sha512";
    outputHash = sha512;
  };

  # Shell snippet to collect all project dependencies.
  collect-cache = concatMapStrings (args: ''
    cp ${fetch args} './${args.filename}'
  '') cache-entries;

in stdenv.mkDerivation {
  name = project-name;
  inherit src;

  # Tell node-gyp to use the provided Node.js headers for native code builds.
  npm_config_nodedir = nodejs;
  # Tell node-pre-gyp to never fetch binaries / always build from source.
  npm_config_build_from_source = "true";

  # Make sure the build uses the right Node.js version everywhere.
  buildInputs = [ coreutils nodejs ];

  # Define the Yarn alias in the build environment.
  postHook = yarn-alias;

  configurePhase = ''
    runHook preConfigure

    # Copy over the Yarn cache.
    # TODO: Can we do without the copy somehow? Links don't work.
    rm -fr '${cache-folder}'
    mkdir -p '${cache-folder}'
    pushd '${cache-folder}' > /dev/null
    ${collect-cache}
    popd > /dev/null

    # Store the absolute path to Yarn for the 'yarn' alias.
    export NIX_YARN_PATH="$(readlink -f '${yarn-path}')"

    # Run normal Yarn install to complete dependency installation.
    yarn install --immutable --immutable-cache

    runHook postConfigure
  '';

  buildPhase = ''
    runHook preBuild
    runHook postBuild
  '';

  installPhase = ''
    runHook preInstall

    mkdir -p $out/libexec $out/bin

    # Move the entire project to the output directory.
    mv $PWD "$out/libexec/$sourceRoot"
    cd "$out/libexec/$sourceRoot"

    # Update the path to Yarn.
    export NIX_YARN_PATH="$(readlink -f '${yarn-path}')"

    # Invoke a plugin internal command to setup binaries.
    yarn nixify install-bin $out/bin

    runHook postInstall
  '';

  passthru = {
    inherit offline-cache;
  };
}
